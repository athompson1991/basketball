qnorm(0.95)
nsim = 10^3
y = rexp(nsim) + 4.5
y
plot(density(y))
weit = dnorm(y) / dexp(y-4.5)
plot(cumsum(weit) / 1:nsim, type='l')
abline(a=pnorm(-4.5), b=0, col="red")
nsim = 10^4
y = rexp(nsim) + 4.5
weit = dnorm(y) / dexp(y-4.5)
plot(cumsum(weit) / 1:nsim, type='l')
abline(a=pnorm(-4.5), b=0, col="red")
nsim = 10^5
y = rexp(nsim) + 4.5
weit = dnorm(y) / dexp(y-4.5)
plot(cumsum(weit) / 1:nsim, type='l')
abline(a=pnorm(-4.5), b=0, col="red")
sum(weit)
sum(weit) / nsim
1.6/1
u <- runif(100)
plot(cumsum(u))
u
plot(cumsum(u-0.5))
u <- runif(10000)
plot(cumsum(u-0.5))
u <- runif(10000)
plot(cumsum(u-0.5))
shots = read.csv("~/google_drive/python_projects/basketball/data/shotchart/shotchart_2019-04-20_205636.csv")
library(scales)
head(shots$made_shot)
logic <- ifelse(shots$made_shot=="True", "blue", "red")
logic <- ifelse(shots$made_shot=="True", "blue", "red")
color <- alpha(logic, 0.1)
head(color)
plot(shots$x, shots$y, col=)
plot(shots$x, shots$y, col=color)
plot(shots$x, shots$y, col=color, pch=16)
color <- alpha(logic, 0.05)
plot(shots$x, shots$y, col=color, pch=16)
head(shots)
shots[shots$team_type == "home", ]
sample(shots[shots$team_type == "home", c("code", "team")], 100)
head(shots[shots$team_type == "home", c("code", "team")])
test = unique(shots[shots$team_type == "home", c("code", "team")])
head(test)
colnames(shots)
plot(shots$x, shots$y, col=color, pch=16)
plot(shots$x, shots$y, col=color, pch=16, cex=2)
setwd("~/google_drive/python_projects/basketball/data"")
setwd("~/google_drive/python_projects/basketball/data")
shots = read.csv("~/google_drive/python_projects/basketball/data/shotchart/shotchart_2019-04-20_205636.csv")
pbp = read.csv("pbp/pbp_2019-04-21_093754.csv")
head(pbp)
pbp = read.csv("pbp/pbp_2019-04-20_220405.csv")
nrow(pbp)
head(pbp)
pbp$player_codes
strsplt
strsplit()
strsplit('['thompkl01', 'greendr01']', ",")
strsplit("['thompkl01', 'greendr01']", ",")
?strsplit
spits = sapply(pbp$player_codes, strsplit, split=",")
spits = sapply(pbp$player_codes[1:100], strsplit, split=",")
spits = sapply(pbp$player_codes, function(x) strsplit(x, ","))
splits = sapply(pbp$player_codes[1:10], function(x) strsplit(x, ","))
strsplit("['thompkl01', 'greendr01']", ",")
splits = sapply(as.character(pbp$player_codes[1:10]), function(x) strsplit(x, ","))
head(splits)
splits[[1]]
length(splits[[1]])
sapply(splits, length)
splits = sapply(as.character(pbp$player_codes), function(x) strsplit(x, ","))
sapply(splits, length)
lengths = sapply(splits, length)
max(lengths)
pbp = read.csv("pbp/pbp_2019-04-21_101807.csv")
nrow(pbp)
head(pbp)
pbp[pbp$player_1 == 'porzikr01' || pbp$player_2 == 'porzikr01', ]
pbp[pbp$player_1 == 'porzikr01' | pbp$player_2 == 'porzikr01', ]
pbp[pbp$player_1 == 'gordoaa01' | pbp$player_2 == 'gordoaa01', ]
nrow(pbp[pbp$player_1 == 'gordoaa01' | pbp$player_2 == 'gordoaa01', ])
games = read.csv("games/games_2019-04-20_134846.csv", stringsAsFactors = F)
nrow(games)
head(pbp)
pbp[pbp$code == "201610250CLE", ]
pbp$points_diff = pbp$home_score - pbp$away_score
plot(pbp[pbp$code == "201610250CLE", ]$points_diff)
pbp[pbp$code == "201610250CLE", ]$points_diff
plot(pbp[pbp$code == "201610250CLE", ]$points_diff, type="l")
knitr::opts_chunk$set(echo = TRUE)
prices <- seq(106.54, 106.43, by=0.01)
prices <- seq(106.54, 106.43, by=0.01)
seq(106.54, 106.43)
?seq
prices <- seq(106.54, 106.43, by=-0.01)
prices
prices <- seq(106.54, 106.43, by=-0.01)
bid_sizes <- c(rep(0, 6), 4500, 4000, 3700, 5200, 900, 6100)
ask_sizes <- c(2800, 1700, 2000, 3500, 3000, 5000)
data.frame(bid_sizes, prices, ask_sizes)
ask_sizes <- c(2800, 1700, 2000, 3500, 3000, 5000, rep(0, 6))
data.frame(bid_sizes, prices, ask_sizes)
kable
knitr::kable(order_book)
order_book
ask_sizes <- c(2800, 1700, 2000, 3500, 3000, 5000, rep(0, 6))
order_book <- data.frame(bid_sizes, prices, ask_sizes)
order_book
prices == 106.47
prices
all.equal(prices, 106.47)
equal(prices, 106.47)
which(prices == 106.47)
all.equal(prices, rep(106.47, 12))
prices
prices
106.54
106.54 == prices
106474 == prices
106.47 == prices
106.47 -prices
106.47 == prices >= 1e-5
tol = 1e-5
106.47 - prices >= 1e-5
abs(106.47 - prices) >= 1e-5
abs(106.47 - prices) <= 1e-5
prices[abs(106.47 - prices) <= 1e-5]
abs(106.47 - prices) <= tol
which(abs(106.47 - prices) <= tol)
location <- which(abs(106.47 - prices) <= tol)
change <- bid_sizes[which] + 300
bid_sizes
change <- bid_sizes[location] + 300
change
location
ask_sizes[location]
bid_sizes[location]
limit_order <- function(order_book, price, qty, buy) {
tol <- 1e-5
idx <- which(abs(price - order_book$prices) <= tol)
if(buy)
order_book$bid_sizes[idx] <- order_book$bid_sizes[idx] + qty
else
order_book$ask_sizes[idx] <- order_book$ask_sizes[idx] + qty
}
order_book
order_book$bid_sizes
cumsum(order_book$bid_sizes)
order_book
order_book$bid_sizes
order_book$ask_sizes
rev(order_book$ask_sizes)
cumsum(rev(order_book$ask_sizes))
cumsum(rev(order_book$ask_sizes)) > 10000
which(cumsum(rev(order_book$ask_sizes)) > 10000)
which(cumsum(rev(order_book$ask_sizes)) > 10000)[1]
market_order <- function(book, qty, buy) {
tol <- 1e-5
idx <- which(abs(price - book$prices) <= tol)
if(buy){
eat_this <- rev(book$ask_size)
up_to <- which(cumsum(eat_this) > qty)[1]
up_to
} else {
}
}
market_order(order_book, 10000, T)
market_order <- function(book, qty, buy) {
tol <- 1e-5
if(buy){
eat_this <- rev(book$ask_size)
up_to <- which(cumsum(eat_this) > qty)[1]
up_to
} else {
}
}
market_order(order_book, 10000, T)
order_book
market_order <- function(book, qty, buy) {
tol <- 1e-5
if(buy){
eat_this <- cumsum(rev(book$ask_size))
up_to <- which(orders > qty)[1]
adjustment <-  eat_this[up_to] - qty
return(adjustment)
} else {
}
}
market_order(order_book, 10000, T)
market_order <- function(book, qty, buy) {
tol <- 1e-5
if(buy){
eat_this <- cumsum(rev(book$ask_size))
up_to <- which(eat_this > qty)[1]
adjustment <-  eat_this[up_to] - qty
return(adjustment)
} else {
}
}
market_order(order_book, 10000, T)
c(T, T, T, F, F)
x <- c(T, T, T, F, F)
sum(x)
x[3:]
x[3:5]
<
market_order <- function(book, qty, buy) {
if(buy){
eat_this <- cumsum(rev(book$ask_size))
swept_market <- which(eat_this > qty)
up_to <- swept_market[1]
eat_this[up_to] <-  eat_this[up_to] - qty
new_sizes <- c(sum(!swept_market), eat_this[up_to:length(eat_this)])
return(new_sizes)
} else {
}
}
market_order(order_book, 10000, T)
market_order <- function(book, qty, buy) {
if(buy){
eat_this <- cumsum(rev(book$ask_size))
swept_market <- which(eat_this > qty)
up_to <- swept_market[1]
eat_this[up_to] <-  eat_this[up_to] - qty
killed_prices <- rep(0, sum(!swept_market))
remaining_prices <- eat_this[up_to:length(eat_this)]
new_sizes <- c(killed_prices, remaining_prices)
return(new_sizes)
} else {
}
}
market_order(order_book, 10000, T)
market_order <- function(book, qty, buy) {
if(buy){
eat_this <- cumsum(rev(book$ask_size))
swept_market <- which(eat_this > qty)
up_to <- swept_market[1]
eat_this[up_to] <-  eat_this[up_to] - qty
killed_prices <- rep(0, sum(!swept_market))
remaining_prices <- eat_this[up_to:length(eat_this)]
new_sizes <- c(killed_prices, remaining_prices)
return(swept_market)
} else {
}
}
market_order(order_book, 10000, T)
market_order <- function(book, qty, buy) {
if(buy){
eat_this <- cumsum(rev(book$ask_size))
swept_market <- eat_this > qty
up_to <- which(swept_market)[1]
eat_this[up_to] <-  eat_this[up_to] - qty
killed_prices <- rep(0, sum(!swept_market))
remaining_prices <- eat_this[up_to:length(eat_this)]
new_sizes <- c(killed_prices, remaining_prices)
return(swept_market)
} else {
}
}
market_order(order_book, 10000, T)
market_order <- function(book, qty, buy) {
if(buy){
eat_this <- cumsum(rev(book$ask_size))
swept_market <- eat_this > qty
up_to <- which(swept_market)[1]
eat_this[up_to] <-  eat_this[up_to] - qty
killed_prices <- rep(0, sum(!swept_market))
remaining_prices <- eat_this[up_to:length(eat_this)]
new_sizes <- c(killed_prices, remaining_prices)
return(new_sizes)
} else {
}
}
market_order(order_book, 10000, T)
market_order <- function(book, qty, buy) {
if(buy){
eat_this <- cumsum(rev(book$ask_size))
swept_market <- eat_this > qty
up_to <- which(swept_market)[1]
eat_this[up_to] <-  eat_this[up_to] - qty
killed_prices <- rep(0, sum(!swept_market))
remaining_prices <- eat_this[up_to:length(eat_this)]
new_sizes <- c(killed_prices, remaining_prices)
book$ask_size <- rev(new_sizes)
} else {
}
return(book)
}
market_order(order_book, 10000, T)
market_order <- function(book, qty, buy) {
if(buy){
eat_this <- cumsum(rev(book$ask_size))
swept_market <- eat_this > qty
up_to <- which(swept_market)[1]
eat_this[up_to] <-  eat_this[up_to] - qty
killed_prices <- rep(0, sum(!swept_market))
remaining_prices <- eat_this[up_to:length(eat_this)]
new_sizes <- c(killed_prices, remaining_prices)
book$ask_sizes <- rev(new_sizes)
} else {
}
return(book)
}
market_order(order_book, 10000, T)
market_order <- function(book, qty, buy) {
if(buy){
eat_this <- cumsum(rev(book$ask_sizes))
swept_market <- eat_this > qty
up_to <- which(swept_market)[1]
eat_this[up_to] <-  eat_this[up_to] - qty
killed_prices <- rep(0, sum(!swept_market))
remaining_prices <- eat_this[up_to:length(eat_this)]
new_sizes <- c(killed_prices, remaining_prices)
book$ask_sizes <- rev(new_sizes)
} else {
eat_this <- cumsum(book$bid_sizes)
swept_market <- eat_this > qty
up_to <- which(swept_market)[1]
eat_this[up_to] <-  eat_this[up_to] - qty
killed_prices <- rep(0, sum(!swept_market))
remaining_prices <- eat_this[up_to:length(eat_this)]
new_sizes <- c(killed_prices, remaining_prices)
book$bid_sizes <- rev(new_sizes)
}
return(book)
}
market_order(order_book, 10000, T)
market_order(order_book, 10000, F)
market_order <- function(book, qty, buy) {
if(buy){
eat_this <- cumsum(rev(book$ask_sizes))
swept_market <- eat_this > qty
up_to <- which(swept_market)[1]
eat_this[up_to] <-  eat_this[up_to] - qty
killed_prices <- rep(0, sum(!swept_market))
remaining_prices <- eat_this[up_to:length(eat_this)]
new_sizes <- c(killed_prices, remaining_prices)
book$ask_sizes <- rev(new_sizes)
} else {
eat_this <- cumsum(book$bid_sizes)
swept_market <- eat_this > qty
up_to <- which(swept_market)[1]
eat_this[up_to] <- eat_this[up_to] - qty
killed_prices <- rep(0, sum(!swept_market))
remaining_prices <- eat_this[up_to:length(eat_this)]
new_sizes <- c(killed_prices, remaining_prices)
book$bid_sizes <- new_sizes
}
return(book)
}
market_order(order_book, 10000, F)
order_book
market_order(order_book, 10000, T)
market_order <- function(book, qty, buy) {
if(buy){
eat_this <- cumsum(rev(book$ask_sizes))
swept_market <- eat_this > qty
up_to <- which(swept_market)[1]
eat_this[up_to] <-  eat_this[up_to] - qty
killed_prices <- rep(0, sum(!swept_market))
remaining_prices <- book$ask_sizes[(up_to+1):length(eat_this)]
new_sizes <- c(killed_prices, eat_this[up_to], remaining_prices)
book$ask_sizes <- rev(new_sizes)
} else {
eat_this <- cumsum(book$bid_sizes)
swept_market <- eat_this > qty
up_to <- which(swept_market)[1]
eat_this[up_to] <- eat_this[up_to] - qty
killed_prices <- rep(0, sum(!swept_market))
remaining_prices <- eat_this[(up_to+1):length(eat_this)]
new_sizes <- c(killed_prices, eat_this[up_to], remaining_prices)
book$bid_sizes <- new_sizes
}
return(book)
}
market_order(order_book, 10000, T)
market_order(order_book, 10000, F)
market_order <- function(book, qty, buy) {
if(buy){
orders <- rev(book$ask_sizes)
eat_this <- cumsum(orders)
swept_market <- eat_this > qty
up_to <- which(swept_market)[1]
eat_this[up_to] <-  eat_this[up_to] - qty
killed_prices <- rep(0, sum(!swept_market))
remaining_prices <- orders[(up_to+1):length(eat_this)]
new_sizes <- c(killed_prices, eat_this[up_to], remaining_prices)
book$ask_sizes <- rev(new_sizes)
} else {
eat_this <- cumsum(book$bid_sizes)
swept_market <- eat_this > qty
up_to <- which(swept_market)[1]
eat_this[up_to] <- eat_this[up_to] - qty
killed_prices <- rep(0, sum(!swept_market))
remaining_prices <- eat_this[(up_to+1):length(eat_this)]
new_sizes <- c(killed_prices, eat_this[up_to], remaining_prices)
book$bid_sizes <- new_sizes
}
return(book)
}
market_order(order_book, 10000, F)
market_order(order_book, 10000, T)
order_book
market_order <- function(book, qty, buy) {
if(buy){
orders <- rev(book$ask_sizes)
eat_this <- cumsum(orders)
swept_market <- eat_this > qty
up_to <- which(swept_market)[1]
eat_this[up_to] <-  eat_this[up_to] - qty
killed_prices <- rep(0, sum(!swept_market))
remaining_prices <- orders[(up_to+1):length(eat_this)]
new_sizes <- c(killed_prices, eat_this[up_to], remaining_prices)
book$ask_sizes <- rev(new_sizes)
} else {
orders <- book$bid_sizes
eat_this <- cumsum(orders)
swept_market <- eat_this > qty
up_to <- which(swept_market)[1]
eat_this[up_to] <- eat_this[up_to] - qty
killed_prices <- rep(0, sum(!swept_market))
remaining_prices <- eat_this[(up_to+1):length(eat_this)]
new_sizes <- c(killed_prices, eat_this[up_to], remaining_prices)
book$bid_sizes <- new_sizes
}
return(book)
}
market_order(order_book, 10000, T)
market_order(order_book, 10000, F)
market_order <- function(book, qty, buy) {
if(buy){
orders <- rev(book$ask_sizes)
eat_this <- cumsum(orders)
swept_market <- eat_this > qty
up_to <- which(swept_market)[1]
eat_this[up_to] <-  eat_this[up_to] - qty
killed_prices <- rep(0, sum(!swept_market))
remaining_prices <- orders[(up_to+1):length(eat_this)]
new_sizes <- c(killed_prices, eat_this[up_to], remaining_prices)
book$ask_sizes <- rev(new_sizes)
} else {
orders <- book$bid_sizes
eat_this <- cumsum(orders)
swept_market <- eat_this > qty
up_to <- which(swept_market)[1]
eat_this[up_to] <- eat_this[up_to] - qty
killed_prices <- rep(0, sum(!swept_market))
remaining_prices <- orders[(up_to+1):length(eat_this)]
new_sizes <- c(killed_prices, eat_this[up_to], remaining_prices)
book$bid_sizes <- new_sizes
}
return(book)
}
market_order(order_book, 10000, F)
bats <- data.frame(
bid_sizes = c(rep(0, 5), 2000, 3000, 4000, 500),
prices = c(210, 207, 205, 202, 200, 217, 215, 214, 213, 212),
ask_sizes = c(700, 2200, 1000, 2500, 1000, rep(0, 5))
)
bats <- data.frame(
bid_sizes = c(rep(0, 5), 2000, 3000, 4000, 2000, 500),
prices = c(210, 207, 205, 202, 200, 212, 213, 214, 215, 217),
ask_sizes = c(700, 2200, 1000, 2500, 1000, rep(0, 5))
)
bats
bats
bats <- data.frame(
bid_sizes = c(rep(0, 5), 500, 2000, 4000, 3000, 2000),
prices = c(210, 207, 205, 202, 200, 212, 213, 214, 215, 217),
ask_sizes = c(700, 2200, 1000, 2500, 1000, rep(0, 5))
)
bats
bats <- data.frame(
bid_sizes = c(rep(0, 5), 500, 2000, 4000, 3000, 2000),
prices = c(217, 215, 214, 213, 212, 210, 207, 205, 202, 200),
ask_sizes = c(700, 2200, 1000, 2500, 1000, rep(0, 5))
)
bats
bats <- data.frame(
bid_sizes = c(rep(0, 5), 2000, 3000, 4000, 2000, 500),
prices = c(217, 215, 214, 213, 212, 210, 207, 205, 202, 200),
ask_sizes = c(700, 2200, 1000, 2500, 1000, rep(0, 5))
)
bats
nasdaq <- data.frame(
bid_sizes = c(rep(0, 5), 3300, 4500, 5000, 500, 1200),
prices = c(218,215, 213, 212, 211, 209, 208, 204, 203, 201),
ask_sizes = c(300, 1800, 500, 4000, 2300, rep(0, 5))
)
nasdaq
arca <- data.frame(
bid_sizes = c(rep(0, 5), 3300, 4500, 5000, 500, 1200),
prices = c(218, 216, 215, 214, 213, 209, 207, 206, 204, 202),
ask_sizes = c(300, 1800, 500, 4000, 2300, rep(0, 5))
)
arca <- data.frame(
bid_sizes = c(rep(0, 5), 2200, 1200, 2600, 10000, 600),
prices = c(218, 216, 215, 214, 213, 209, 207, 206, 204, 202),
ask_sizes = c(600, 2800, 22300, 5400, 800, rep(0, 5))
)
arca
bats
nbbo_routing <- function(books, buy, qty) {
sapply(books, function(book) {
min(book$prices[book$bid_sizes != 0])
})
}
nbbo_routing(list(nasdaq, bats, arca))
